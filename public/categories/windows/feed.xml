<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on Stephan Bridger</title>
    <link>https://hexagram.foo/categories/windows/</link>
    <description>Recent content in Windows on Stephan Bridger</description>
    <image>
      <title>Stephan Bridger</title>
      <url>https://hexagram.foo/fog.jpeg</url>
      <link>https://hexagram.foo/fog.jpeg</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hexagram.foo/categories/windows/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Detecting WoW64 Processes</title>
      <link>https://hexagram.foo/posts/detecting-wow64-processes/</link>
      <pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate>
      <guid>https://hexagram.foo/posts/detecting-wow64-processes/</guid>
      <description>&lt;p&gt;WoW64 (Windows 32-bit on Windows 64-bit) is a subsystem within Microsoft Windows that lets Windows run 32-bit programs on 64-bit hardware.&lt;/p&gt;
&lt;p&gt;One way to glean what processes are currently running in WoW64 mode is by querying &lt;code&gt;NtQuerySystemInformation&lt;/code&gt; and checking whether &lt;code&gt;IsWow64Process&lt;/code&gt; returns true or not.&lt;/p&gt;
&lt;p&gt;This returns a pointer to a value that is set to TRUE if the process is running under WOW64 on an Intel64, x64, or ARM64 processor.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypassing Windows Defender</title>
      <link>https://hexagram.foo/posts/bypassing-windows-defender/</link>
      <pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://hexagram.foo/posts/bypassing-windows-defender/</guid>
      <description>&lt;p&gt;Lately I&amp;rsquo;ve been poking around at Windows internals and writing low level code. This morning I thought I&amp;rsquo;d try to bypass Windows Defender &lt;em&gt;and&lt;/em&gt; get a low score on Virus Total.&lt;/p&gt;
&lt;p&gt;One trick I’ve been playing with is writing shellcode to the Windows registry to keep things “fileless.” It’s not super fancy, but it’s kind of neat. I combined that with indirect syscalls and some cryptographic routines to get Windows Defender to chill out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Extracting Windows WiFi Profiles</title>
      <link>https://hexagram.foo/posts/extracting-windows-wifi-profiles/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://hexagram.foo/posts/extracting-windows-wifi-profiles/</guid>
      <description>&lt;h2 id=&#34;wifiextract&#34;&gt;wifiExtract&lt;/h2&gt;
&lt;p&gt;The other day my grandmother forgot her Windows WiFi SSID and password when she wanted to share it with a friend. So I thought if I could just automate the retrieval of her wireless profiles, she would never forget them again in the future.&lt;/p&gt;
&lt;p&gt;It turns out, the Windows API offers a nice way to enumerate WLAN information. First, we open a handle to the WLAN system by first calling the &lt;code&gt;WlanOpenHandle&lt;/code&gt; function, which we can then use to enumerate WLAN interfaces with the &lt;code&gt;WlanEnumInterfaces&lt;/code&gt; function. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using C Sharp to Enumerate Windows Processes</title>
      <link>https://hexagram.foo/posts/using-c-sharp-to-enumerate-windows-processes/</link>
      <pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://hexagram.foo/posts/using-c-sharp-to-enumerate-windows-processes/</guid>
      <description>&lt;p&gt;In previous posts, I covered how to observe process information &lt;a href=&#34;https://hexagr.blogspot.com/2023/08/windows-process-initialization.html&#34;&gt;in Windbg by starting a debugging session and dumping the Process Environment Block&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And how we can view the EPROCESS structure, including a doubly linked-list of &lt;a href=&#34;https://hexagram.foo/posts/finding-active-processes-with-windbg/&#34;&gt;active processes via ActiveProcessLinks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But in this post, we&amp;rsquo;ll discuss yet another way of gleaning information about processes in Windows, this time from another structure within the Windows ecosystem: the &lt;code&gt;SYSTEM_PROCESS_INFORMATION&lt;/code&gt; structure.&lt;/p&gt;
&lt;h2 id=&#34;system_process_information-structure&#34;&gt;SYSTEM_PROCESS_INFORMATION Structure&lt;/h2&gt;
&lt;p&gt;Microsoft tells us in their documentation that this structure holds various entries which hold system and process information.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding Active Processes with Windbg</title>
      <link>https://hexagram.foo/posts/finding-active-processes-with-windbg/</link>
      <pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://hexagram.foo/posts/finding-active-processes-with-windbg/</guid>
      <description>&lt;p&gt;In the Windows kernel, each process is assigned an EPROCESS structure, which is a kernel object that represents a program or process. And a Process Environment Block (PEB) is just one of many structures pointed to by the EPROCESS structure.  A snippet from &lt;code&gt;_EPROCESS&lt;/code&gt; as documented on Vergilius Project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OwnerProcessId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_PEB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Peb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_MM_SESSION_SPACE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VOID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sparel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In user space however, we cannot directly reference all of the EPROCESS structures and their data. At most, we can do something like &lt;code&gt;dt nt!_EPROCESS&lt;/code&gt; in windbg and get a peek at the layout. We&amp;rsquo;ll have to enable kernel debugging to more closely examine things. But here&amp;rsquo;s what we can see in user mode. The EPROCESS structure is large. The entire output from windbg is as follows:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
